/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */

/**
 *
 * @author MoaathAlrajab
 */
public class Homework09 {
    
    // ToDo 01:  Write an algorithm to solve the following problem
    /*
    The sequence of triangle numbers is generated by adding the natural numbers. 
    So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
    We can see that 28 is the first triangle number to have over five divisors.

    What is the value of the first triangle number to have over one hundred divisors?
    
    */
    
    private static int findTriangleNum (int n)
    {
        /*  
        General formula to find the value of a triangle number n
        Assuming that the first triangle number is 1, second is 3, third is 6...
        Formula --> (n (n + 1) / 2)
        
        int n - will be the corresponding triangle number to be found, will return its value.
        */
        return n * (n + 1) / 2;
        
    } // End method.
    
    private static int findNumberOfDivisors (int n)
    {
        /*
        This method will be used to find the number of divisors a certain number contains.
        
        Assumptions --> The number n will be a non-negative integer.
        */
        

        // For loop to iterate from 1 to n
        // At every iteration, will check if n is divisible by i, if no remainders,
        // Counter for divisor will increase by 1.
        int numDivisors = 1; // Will start at 1 since iteration will stop at n/2 and won't include n itself as a divisor. 
        
        for (int i = 1; i <= n/2; i++ ) // Will only iterate through n/2 since that's where second largest divisor would be after itself.
        {
            if (n % i == 0)
            {
                numDivisors++;
            } // End if.
        } // End for.
        return numDivisors;
    } // End method.
    
    private static int findTriangleNumWithCertainNumOfDivisors (int numDivisorsToBeFound)
    {
        int num = 1;
        
        while (findNumberOfDivisors(findTriangleNum(num)) < numDivisorsToBeFound)
        {
            num++;
        } // End while.
        return findTriangleNum(num);
    } // End method.
    
    public static void main (String[] args)
    {
        // test findTriangleNum
        int a1 = findTriangleNum(3);
        int e1 = 6;
        
        int a2 = findTriangleNum(13);
        int e2 = 91;
        
        // Testing for findTriangleNum
        System.out.println("~~~~Testing for findTriangleNum method~~~~");
        
        System.out.println("Actual Result: " + a1 + "\n" + 
                           "Expected Result: " + e1);
        
        System.out.println();
        
        System.out.println("Actual Result: " + a2 + "\n" + 
                           "Expected Result: " + e2);
        
        System.out.println();

        // Testing for findNumberOfDivisors
        int a3 = findNumberOfDivisors(28);
        int e3 = 6;
        
        int a4 = findNumberOfDivisors(144);
        int e4 = 15;

        
        System.out.println("~~~~Testing for findNumberOfDivisors method~~~~");
        
        System.out.println("Actual Result: " + a3 + "\n" + 
                           "Expected Result: " + e3);

        System.out.println();
        
        System.out.println("Actual Result: " + a4 + "\n" + 
                           "Expected Result: " + e4);
        System.out.println();
        
        // Testing for findTriangleNumWithCertainNumOfDivisors
        System.out.println("~~~~Testing for findNumberOfDivisors method~~~~");
        
        int a5 = findTriangleNumWithCertainNumOfDivisors(5);
        int e5 = 28;
        
        int a6 = findTriangleNumWithCertainNumOfDivisors(10);
        int e6 = 120;
        
        int a7 = findTriangleNumWithCertainNumOfDivisors(100);
        int e7 = 73920;
        System.out.println("Actual Result: " + a5 + "\n" + 
                           "Expected Result: " + e5);
        
        System.out.println();
        
        System.out.println("Actual Result: " + a6 + "\n" + 
                           "Expected Result: " + e6); 
        
        System.out.println();
        
        System.out.println("Actual Result for first Triangle Number with over 100 divisors: " + a7 + "\n" + 
                           "Expected Result: " + e7);
        System.out.println("Actual number of divisors for "+ a7 + ": " + findNumberOfDivisors(73920));
        

        
        
        
    }
}
